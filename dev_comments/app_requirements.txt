Build an auction place to sell historical artifacts

    External userâ€™s goal:
        Find, learn about and acquire artifacts they are interested in

    Site owner's goal:
        Earn money on selling the artifacts (the site owner is the seller)

Potential features to include:
    (done) Create an online store focused on selling unique historical artifacts, such as The Holy Grail to the highest bidder.

    (done) Allow users to search for artifacts based on various fields.

    (done) Allow users to see the price, image and other basic details about an artifact.

    (done) Users would be able to learn about the historical details of each artifact, the culture it came from, the way it was created and its journey across different owners in the past.

    For example, you might want to include information about "events" that took place in the past and that one or more artifacts took place in, or originated from.

    (done) Allow users to bid on items, or pay a higher price to purchase them immediately. Users have to be registered for this.

(*) Advanced potential feature (nice-to-have)
(ok) Allow registered users to write reviews about the artifacts, only if they purchased them.

(ok) Expand the search functionality to allow users to sort results based on price, age and other parameters in both ascending and descending order.

(**) Include pagination and/or other dynamic display actions using javascript.

(***) Use javascript polling to update the page whenever there's a new bid.

--

A project violating any of these requirements will FAIL

(done) Django Full Stack Project: 
Build a Django project backend by a relational database to create a website that allows users to store and manipulate data records about a particular domain.

(done) Multiple Apps: 
The project must be a brand new Django project, composed of multiple apps (an app for each potentially reusable component in your project).

(done) Data Modeling: 
Put some effort into designing a relational database schema well-suited for your domain. Make sure to put some thought into the relationships between entities. Create at least 2 custom django models beyond the examples shown on the course

(done) User Authentication: 
The project should include an authentication mechanism, allowing a user to register and log in, and there should be a good reason as to why the users would need to do so. e.g., a user would have to register to persist their shopping cart between sessions (otherwise it would be lost).

User Interaction: 
Include at least one form with validation that will allow users to create and edit models in the backend (in addition to the authentication mechanism).

Use of Stripe: 
At least one of your Django apps should contain some e-commerce functionality using Stripe. This may be a shopping cart checkout, subscription-based payments or single payments, donations, etc. After paying successfully, the user would then gain access to additional functionality/content on the site. Note that for this project you should use Stripe's test functionality, rather than actual live payments.

(done) Structure and Navigation: 
Incorporate a main navigation menu and structured layout (you might want to use Bootstrap to accomplish this).

Use of JavaScript: 
The frontend should contain some JavaScript logic to enhance the user experience.

Documentation: 
Write a README.md file for your project that explains what the project does and the value that it provides to its users.

(done) Version Control: 
Use Git & GitHub for version control.

Attribution:
Maintain clear separation between code written by you and code from external sources (e.g. libraries or tutorials). Attribute any code from external sources to its source via comments above the code and (for larger dependencies) in the README.

Deployment: 
Deploy the final version of your code to a hosting platform such as Heroku.

Security: 
Make sure to not include any passwords or secret keys in the project repository. Make sure to turn off the Django DEBUG mode, which could expose secrets.